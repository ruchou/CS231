Mutable References

Chapter 13 of the Pierce book


t ::= ... | ref t 		(* allocate a new memory cell, whose value is initialized to the value of t *)
		  | !t 			(* retrieve the contents of a memory cell *)
		  | t := t 		(* update the contents of a memory cell to a new value *)

T ::= ... | Ref T


Type System:

G |- t : T
--------------------- T-Ref
G |- ref t : Ref T


G |- t : Ref T
---------------------- T-Deref
G |- !t : T


G |- t1 : Ref T
G |- t2 : T
---------------------- T-Asgn
G |- t1 := t2 : Unit


What are the values of type Ref T?

v ::= true | false | n  | function x:T  -> t  | ....

How about ref v?

let x = ref 0 in
    let y = ref 0 in
        let _ = x:= 1 in
            !y
--->


let y = ref 0 in
    let _ = (ref 0) := 1 in
        !y

--->
let _ =  (ref 0 ):= 1 in
    !(ref 0)

--->
let _ = (ref 1) in
    !(ref 0)

--->* 0


We will introduce an infinite set of memory locations, denoted l.

v ::= ... | l


New operational semantics judgement of the forms:

<t,mu> ---> <t',mu'>

where us is a heap (store/memory):
    finite map from locations l to their values v


<t, mu> --> <t',mu'>
------------------------------- E-Ref
<ref t, mu> --> <ref t', mu'>

fresh l
--------------------------E-Ref
<ref v,mu> ---> <l,mu U {(l,v)}>



<t, mu> --> <t',mu'>
------------------------------- E-Deref
<!t, mu> --> <!t', mu'>


mu(l) = v
------------------------------- E-DerefRed
<!l, mu> --> <v,mu>



<t1, mu> --> <t1',mu'>
------------------------------- E-Asgn1
<t1 := t2, mu> --> <t1' := t2,mu'>

<t2, mu> --> <t2',mu'>
------------------------------- E-Asgn2
<v1 := t2, mu> --> <v1' := t2,mu'>

l in domain(mu)
------------------------------- E-AsnRed
<l := v, mu> --> <(), mu[l -> v ]>


Type Soundness:

If {};{} |- t:T and <t,{}> --> * <t',mu'> then either t' is a value or exists t'' and mu''
 s.t. <t'',mu''>

Progress:Forall mu, If {};Sigma |- t:T and Sigma  |= mu, then either t is a value or exists t' and mu' s.t. <t,mu> --> <t',mu'>.

CounterExample: {};{(l,Int)} |- !l: Int

Preservation: If {};Sigma |- t:T and Sigma and <t,mu> --> <t',mu'> then there exists Sigma' s.t. {};Sigma' |- t':T
and Sigma' |= mu'.
Example:
<!(ref 0),{}> --> <!l, {(l,0)}> ---> <0,{(l,0)}>

Problem: need a rule for typechecking location:

Solution: Typing judgement is going to also rely on  a *store typing* Sigma, which is
a map from locations to the type of their contents.

Sigma(l) : T
------------------
G;Sigma |- l: Ref T

Second Problem: Need a relationship between Sigma and mu.

We will say that Sigma and mu are consistent with one another, denoted  Sigma  |= mu , if:
    1. domain(Sigma) = domain(mu)
    2. forall l in domain(Sigma), {};Sigma |- mu(l) : Sigma(l)

Example:
    {(l,Int)} is not consistent with {}
    {(l,Int)} is not consistent with {(l,false)}
    {(l,Int)} is not consistent with {(l,43)}