
A little language of booleans:

t ::= true | false | if t then t else t

here's an example program in this language:

if (if true then false else true) then false else true


*values* are the legal results of computation and are defined by the following grammar:

v ::= true | false


Big-step operational semantics:

We define a new binary relation on pairs of terms and values, which we denote as t => v.  We define inference rules that specify which pairs of terms and values are in this relation.


--------------- E-True
true => true


--------------- E-False
false => false



t1 => true     t2 => v2
--------------------------- E-IfTrue
(if t1 then t2 else t3) => v2


t1 => false     t3 => v3
--------------------------- E-IfFalse
if t1 then t2 else t3 => v3


// 1/8

--------------------------- E-Num
 n => n


    t1 => n1  t2 => n2   n1 [[+]] n2 = n //mathematical way plus
------------------------------- E- Plus
    t1 + t2 => n


    t1 => n1 t2=> n2  ( n1 [[>]] n2 )
------------------------------- E-GreaterTrue
    (t1 > t2) => true

    t1 => n1 t2=> n2  ( n1 [[<=]] n2 )
------------------------------- E-GreaterFalse
    (t1 > t2) => false

//


Each rule is a shorthand for a first-order logic formula.  For example, here is E-IfTrue in first-order logic:

forall t1, t2, t3, v2:
	if (t1 => true /\ t2 => v2),
		then (if t1 then t2 else t3) => v2


The rules can be used to *derive* particular elements of the => relation.  This is done simply by instantiating the metavariables within a rule with specific terms/values and then recursively deriving the required premises of the rule.

Here's a derivation of the fact that (if false then true else false) evaluates to false:


-------------- E-False  -------------- E-False
false => false 			false => false
-------------------------------------- E-IfFalse
if false then true else false => false


Theorem Forall t exists v such that t => v

    s(true) = 0 = s(false)
    s(if t1 then t2 else t3) = 1 + s(t1) + s(t2) + s(t3)

Proof by induction S(t)
    IH(induction hypothesis) : forall t' where S(t') < S(t)  exists v' such that t' => v'


    Base Case S(t) = 0 then t = true or false
        Suppose t = true then
            By E-true, true => true    ----------- E- True
                                        true => true

        Supposed t= false ......


    Induction Case : S(t) = k > 0
                By definition of s ,
                    t = if t1 then t2 else t3
                    and
                    s(t) = 1 + s(t1) + s(t2) + s(t3)

                    By smartness, s(t1) < s(t), s(t2) < s(t), s(t3)< s(t).

                    Then by IH, exist v1,v2,v3 such that t1 => v1, t2 => v2, t3 => v3

                    Case Analysis on v1: (need to be exhaustive all possible cases)
                        -Suppose v1 = true then by E-IfTrue we have that
                            if t1 then t2 else t3 => t2
                        -Suppose v1 = false then by E-IfFalse we have that
                            if t1 then t2 else t3 => t3

                    QED



t -> t' (from t with some computation to t')

t ::= true | false | if t then t else t
v ::= true | false

Small-step operational semantic

Define a relation of the form t --> t' (like reduction )

if (if true then false else true) then false else true
    --> if false then false else true
    --> true
// not a single derivation tree

Computation rules (0 premises):

------------------- S-IfTrue
if true then t2 else t3 --> t2

------------------- S-IfFalse
if false then t2 else t3 --> t3


Congruence rules (1 premise):
t1 --> t1'
------------------- S-If
if t1 then t2 else t3 -->
    if t1' then t2 else t3


falseCount(true) = 0
falseCount(false) = 1
falseCount(if t1 then t2 else t2) =
    falseCount(t1) + falseCount(t2)+ falseCount(t3)

Theorem: If t ---> t', then falseCount(t) >= falseCount(t')
  //structure induction -> assume subterm subtree holds
Proof; By structure induction on t.
Induction hypothesis:
    If t0 -> t0', where t0 is a sub-term of t then falseCount(t0) >= falseCount(t0')

Case analysis on the form of t.

Case t= true: t doesn't step. contradiction
Case t = false: t doesn't step. Contradiction
Case t = if t1 then t2 else t3 :
    Case analysis on the root rule used in the derivation of t ---> t':
        Case S-IfTrue: Then t1 = true and t' = t2.
            By the definition of falseCount,
                falseCount(if t1 then t2 else t3) >= falseCount(t2)
        Case S-IfFalse: Then t1 = false and t' = t3
            By the definition of falseCount,
                falseCount(if t1 then t2 else t3) >= falseCount(t3)
        Case S-If: Then t1 --> t1' and t' = if t1' then t2 else t3.
            By IH
                falseCount(t1) >= falseCount(t1')
                Therefore,
                fC(t1) + fC(t2)+ fC(t3) >= fC(t1') + fC(t2') + fC(t3')
                fC(if t1 then t2 else t3) >= fC(if t1' then t2 else t3)

or

Proof; By induction on the derivation of t ----> t'
Induction hypothesis:
    If t0 ---> t0', where the derivation t0 ---> t0' is a subderivation of the derivation of t --> t'
    ,then falseCount(t0) >= falseCount(t0')

Case analysis on the form of t.

Case t= true: t doesn't step. contradiction
Case t = false: t doesn't step. Contradiction
Case t = if t1 then t2 else t3 :
    Case analysis on the root rule used in the derivation of t ---> t':
        Case S-IfTrue: Then t = if true then t2 else t3 and t' = t2.
            By the definition of falseCount,
                falseCount(if t1 then t2 else t3) >= falseCount(t2)
        Case S-IfFalse: Then t = if false then t2 else t3 and t' = t3
            By the definition of falseCount,
                falseCount(if t1 then t2 else t3) >= falseCount(t3)
        Case S-If: Then t = if t1 then t2 else t3 and t1---> t1' and t' = if t1' then t2 else t3
            By IH
                falseCount(t1) >= falseCount(t1')
                Therefore,
                fC(t1) + fC(t2)+ fC(t3) >= fC(t1') + fC(t2') + fC(t3')
                fC(if t1 then t2 else t3) >= fC(if t1' then t2 else t3)



// list of congruence rules followed by one  computation rule

    ------------- S-IFTrue
    if t f t -> f
----------------S-If
if (if t f t) f t -> If f f t

 // not a single derivation tree
 // continuous separate derivation tree
 //


t1 -> t1'
----------------- S- Plus1
t1 + t2 --> t1' + t2

 what if t1 is already evaluated ?
 what about t2 ?

t2 -> t2'
---------------- S-Plus2
v1 + t2 -> v1 + t2'

 Finally, both are evaluated

n1 [[+] n2 = n
----------------- S
n1 + n2 ---> S-PlusRed


t1 -> t1'
----------------- S- Gt1
t1 > t2 --> t1' > t2


t2 -> t2'
---------------- S-Gt2
v1  >  t2 -> v1 > t2'

 Finally, both are evaluated

n1 [[>] n2 = b
----------------- S-GtRed
n1 > n2 ---> b (boolean)

Example :
(1+5) + (2+3)

->S-plus1 6 + (2+3)
->S-plus2 : 6 + 5
->S-PlusRed : 11
//different separate derivation tree

A term is a *normal form if there is not t' such that t --> t'
We will always arrange for values to be normal forms.
A normal form that is not a value is called *stuck expression.

Example stuck expression is true + 5

(true + 5) + 4

if (true + 5) then 0 else 1


The multi-step relation t ---> * t'

-----------------M-Refl
t ---> *t

t ---> t'
-----------------M-Step
t -->* t'

t ----> * t'' t'' ----> *t'
----------------M-Trans
t --->*t'
// * means multi steps

A term t is *eventually stuck* if there exists some t' such that
t---> * t' and t' is stuck

Example: (1+3) + true



falseCount(n) = 0
falseCount(t1+t2) = falseCount(t1) + falseCount(t2)
Thm: If t --> t', then falseCount(t) >= falseCount(t')

Proof:
    By induction on the derivation of t -> t'
                    //structure induction :  t0 is a subterm of t
    IH: If t0 -> t0' where the derivation of t0 -> t0' is a subderivation of t-> t', then
    falseCount(t0) >= falseCount(t0')

    Case S-Plus: Then t = t1 + t2, t' = t1' + t2 , t1 -> t1'
        By IH falseCount(t1) >= falseCount(t1')
        So, falseCount(t) = falseCount(t1) + falseCount(t2)
                          >= falseCount(t1') + falseCount(t2) = falseCount(t')

  Just ignore true or false because they dont step



falseCount(n) = 0
falseCount(t1+t2) = falseCount(t1) + falseCount(t2)
Thm: If d:(t -->*t'), then falseCount(t) >= falseCount(t')
Proof.
By induction on the d.
IH: If d0:(t0-->*t0') : where d0 is a sub-derivation  of d. then fC(t0) >= fC(t0')

IH(Structure Induction -- DOES NOT WORK)
    IF t0 -->* t0', where t0 is as sub-term of t, then fc(t0) >= fC(t0')
    //because d1:(t--> * t'') : t is t not a sub-term of t !!
    //cannot work

Case Analysis on the root rule in d.
    Case M-Refl: Then t = t', so fc(t) = fc(t') >= fC(t')
    Case M-Step: Then t --> t', then by the single-step theorem , fc(t) >= fc(t')
    Case M-Trans: Then d1:(t--> * t'') and d2:(t'' --> t') and d1 and d2 are sub-derivations of d
            By IH on d1, fc(t) >= fc(t'')
            By IH on d1, fc(t'') >= fc(t')
            The result follows by transitivity of >= .


Thm: Forall t, exists t' such that t --> t'


Static Type Systems (Chapter 8)